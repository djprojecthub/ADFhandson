{
	"name": "pipeline1",
	"properties": {
		"description": "Extract data from salesforce and load them into Data Lake RAW layer. This pipeline will handle full and delta loads.",
		"activities": [
			{
				"name": "SetCurrentCSTDateTimeForFileName",
				"description": "Setting up the current datetime that will be used for filename in data lake.",
				"type": "SetVariable",
				"dependsOn": [],
				"userProperties": [],
				"typeProperties": {
					"variableName": "varCurrentDateTimeCSTFilename",
					"value": {
						"value": "@concat(formatDateTime(convertTimeZone(utcnow(),'UTC','Central Standard Time'),'yyyy_MM_dd_HH_mm_ss'),'_cst')",
						"type": "Expression"
					}
				}
			},
			{
				"name": "SetCurrentCSTDateTime",
				"description": "Setting current date time in CST format for setting up watermark for next load",
				"type": "SetVariable",
				"dependsOn": [],
				"userProperties": [],
				"typeProperties": {
					"variableName": "varCurrentDateTimeCST",
					"value": {
						"value": "@formatDateTime(convertTimeZone(utcnow(),'UTC','Central Standard Time'),'yyyy-MM-dd HH:mm:ss')",
						"type": "Expression"
					}
				}
			},
			{
				"name": "Set_YYYYMMDD_Path",
				"description": "Setting Date path for ADLS folders",
				"type": "SetVariable",
				"dependsOn": [],
				"userProperties": [],
				"typeProperties": {
					"variableName": "varYYYYMMDD",
					"value": {
						"value": "@formatDateTime(convertTimeZone(utcnow(),'UTC','Central Standard Time'),'yyyy/MM/dd')",
						"type": "Expression"
					}
				}
			},
			{
				"name": "GetSalesforceTableList",
				"description": "getting the list of Salesforce tables from control table stored in Azure SQL",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "SetCurrentCSTDateTimeForFileName",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "SetCurrentCSTDateTime",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "Set_YYYYMMDD_Path",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": {
							"value": "SELECT *, convert(varchar,DeltaLastWatermarkDateTime,120) as FormattedLastWatermarkDateTime\nFROM ETL.ControlTableSourceToAdlsLoad\nWHERE IsActiveFlag = 'Y'\nAND SourceType = 'Salesforce'\nAND (PipelineTriggerName = '@{pipeline().TriggerName}'\nOR PipelineTriggerName IS NULL)",
							"type": "Expression"
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "IterateSalesforceSourceTableList",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "GetSalesforceTableList",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('GetSalesforceTableList').output.value",
						"type": "Expression"
					},
					"activities": [
						{
							"name": "ExtractionMethod",
							"type": "Switch",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"on": {
									"value": "@if(equals(item().SourceFullExtractOverrideFlag,'Y'),'FULL',toUpper(item().SourceExtractMethod))",
									"type": "Expression"
								},
								"cases": [
									{
										"value": "FULL",
										"activities": [
											{
												"name": "CopySalesforceToADLS",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "SalesforceSource",
														"additionalColumns": [
															{
																"name": "SourceExtractDateTime",
																"value": {
																	"value": "@variables('varCurrentDateTimeCST')",
																	"type": "Expression"
																}
															}
														],
														"readBehavior": "query"
													},
													"sink": {
														"type": "ParquetSink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings"
														},
														"formatSettings": {
															"type": "ParquetWriteSettings"
														}
													},
													"enableStaging": false
												}
											},
											{
												"name": "LogCopySuccess",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "CopySalesforceToADLS",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderQuery": {
															"value": "SELECT '@{pipeline().DataFactory}' as DataFactoryName,\n'@{pipeline().Pipeline}' as PipelineName,\n'@{pipeline().RunId}' as RunId,\n'SQL_To_DataLake' as SourceToTargetType,\n'@{item().SourceExtractMethod}' as SourceExtractMethod,\n'@{item().SourceFullExtractOverrideFlag}' as SourceFullExtractOverrideFlag,\n'@{item().SourceServerName}' as SourceServerName,\n'@{item().SourceDatabaseName}' as SourceDatabaseName,\n'@{item().SourceSchemaName}' as SourceSchemaName,\n'@{item().SourceTableName}' as SourceTableName,\n'@{item().DataLakeContainer}' as TargetDataLakeContainerName,\n'@{concat(item().DataLakeFolder,'/FULL/',item().SourceSchemaName,'/',item().DestinationTargetFolder)}' as TargetDirectoryName,\n'@{concat('FULL_',item().DestinationTargetFolder,'.parquet')}' as TargetFileName,\n'@{pipeline().TriggerType}' as TriggerType,\n'@{pipeline().TriggerID}' as TriggerId,\n'@{pipeline().TriggerName}' as TriggerName,\n'@{pipeline().TriggerTime}' as TriggerTime,\n'@{activity('CopySalesforceToADLS').output.rowsCopied}' as RowsCopied,\n'@{activity('CopySalesforceToADLS').output.rowsRead}' as RowsRead,\n'@{activity('CopySalesforceToADLS').output.usedParallelCopies}' as NoParallelCopies,\n'@{activity('CopySalesforceToADLS').output.copyDuration}' as CopyDurationInSecs,\n'@{activity('CopySalesforceToADLS').output.effectiveIntegrationRuntime}' as effectiveIntegrationRuntime,\n'@{activity('CopySalesforceToADLS').output.executionDetails[0].source}' as SourceType,\n'@{activity('CopySalesforceToADLS').output.executionDetails[0].sink}' as SinkType,\n'@{activity('CopySalesforceToADLS').output.executionDetails[0].status}' as ExecutionStatus,\n'@{activity('CopySalesforceToADLS').output.executionDetails[0].start}' as CopyActivityStartTime,\n'@{utcnow()}' as CopyActivityEndTime,\n'@{activity('CopySalesforceToADLS').output.executionDetails[0].detailedDurations.queuingDuration}' as CopyActivityQueuingDurationInSecs,\n'@{activity('CopySalesforceToADLS').output.executionDetails[0].detailedDurations.timeToFirstByte}' as CopyActivityPreCopyScriptDurationInSecs,\n'@{activity('CopySalesforceToADLS').output.executionDetails[0].detailedDurations.transferDuration}' as CopyActivityTransferDurationInSecs,\nnull as ErrorMessage",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"sink": {
														"type": "AzureSqlSink",
														"disableMetricsCollection": false
													},
													"enableStaging": false
												}
											},
											{
												"name": "LogCopyFailure",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "CopySalesforceToADLS",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderQuery": {
															"value": "SELECT '@{pipeline().DataFactory}' as DataFactoryName,\n'@{pipeline().Pipeline}' as PipelineName,\n'@{pipeline().RunId}' as RunId,\n'SQL_To_DataLake' as SourceToTargetType,\n'@{item().SourceExtractMethod}' as SourceExtractMethod,\n'@{item().SourceFullExtractOverrideFlag}' as SourceFullExtractOverrideFlag,\n'@{item().SourceServerName}' as SourceServerName,\n'@{item().SourceDatabaseName}' as SourceDatabaseName,\n'@{item().SourceSchemaName}' as SourceSchemaName,\n'@{item().SourceTableName}' as SourceTableName,\n'@{item().DataLakeContainer}' as TargetDataLakeContainerName,\n'@{concat(item().DataLakeFolder,'/FULL/',item().SourceSchemaName,'/',item().DestinationTargetFolder)}' as TargetDirectoryName,\n'@{concat('FULL_',item().DestinationTargetFolder,'.parquet')}' as TargetFileName,\n'@{pipeline().TriggerType}' as TriggerType,\n'@{pipeline().TriggerID}' as TriggerId,\n'@{pipeline().TriggerName}' as TriggerName,\n'@{pipeline().TriggerTime}' as TriggerTime,\nnull as RowsCopied,\nnull as RowsRead,\n'@{activity('CopySalesforceToADLS').output.usedParallelCopies}' as NoParallelCopies,\n'@{activity('CopySalesforceToADLS').output.copyDuration}' as CopyDurationInSecs,\n'@{activity('CopySalesforceToADLS').output.effectiveIntegrationRuntime}' as effectiveIntegrationRuntime,\n'@{activity('CopySalesforceToADLS').output.executionDetails[0].source}' as SourceType,\n'@{activity('CopySalesforceToADLS').output.executionDetails[0].sink}' as SinkType,\n'@{activity('CopySalesforceToADLS').output.executionDetails[0].status}' as ExecutionStatus,\n'@{activity('CopySalesforceToADLS').output.executionDetails[0].start}' as CopyActivityStartTime,\n'@{utcnow()}' as CopyActivityEndTime,\n'' as CopyActivityQueuingDurationInSecs,\n'' as CopyActivityPreCopyScriptDurationInSecs,\n'' as CopyActivityTransferDurationInSecs,\n'@{replace(activity('CopySalesforceToADLS').output.errors[0].Message,'''','')}' as ErrorMessage",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"sink": {
														"type": "AzureSqlSink",
														"disableMetricsCollection": false
													},
													"enableStaging": false
												}
											}
										]
									},
									{
										"value": "DELTA",
										"activities": [
											{
												"name": "CopySalesforceToADLSDelta",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "SalesforceSource",
														"additionalColumns": [
															{
																"name": "SourceExtractDateTime",
																"value": {
																	"value": "@variables('varCurrentDateTimeCST')",
																	"type": "Expression"
																}
															}
														],
														"query": {
															"value": "SELECT FIELDS(ALL) FROM @{item().SourceTableName} \nWHERE (@{item().DeltaCreateWatermarkColumnName} > \n@{formatDateTime(item().FormattedLastWatermarkDateTime,'yyyy-MM-ddTHH:mm:ssZ')} \nAND @{item().DeltaCreateWatermarkColumnName} <= \n@{formatDateTime(variables('varCurrentDateTimeCST'),'yyyy-MM-ddTHH:mm:ssZ')})\nOR\n(@{item().DeltaUpdateWatermarkColumnName} > \n@{formatDateTime(item().FormattedLastWatermarkDateTime,'yyyy-MM-ddTHH:mm:ssZ')} \nAND @{item().DeltaUpdateWatermarkColumnName} <= \n@{formatDateTime(variables('varCurrentDateTimeCST'),'yyyy-MM-ddTHH:mm:ssZ')})",
															"type": "Expression"
														},
														"readBehavior": "query"
													},
													"sink": {
														"type": "ParquetSink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings"
														},
														"formatSettings": {
															"type": "ParquetWriteSettings"
														}
													},
													"enableStaging": false
												}
											},
											{
												"name": "LogCopySuccessDelta",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "CopySalesforceToADLSDelta",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderQuery": {
															"value": "SELECT '@{pipeline().DataFactory}' as DataFactoryName,\n'@{pipeline().Pipeline}' as PipelineName,\n'@{pipeline().RunId}' as RunId,\n'SQL_To_DataLake' as SourceToTargetType,\n'@{item().SourceExtractMethod}' as SourceExtractMethod,\n'@{item().SourceFullExtractOverrideFlag}' as SourceFullExtractOverrideFlag,\n'@{item().SourceServerName}' as SourceServerName,\n'@{item().SourceDatabaseName}' as SourceDatabaseName,\n'@{item().SourceSchemaName}' as SourceSchemaName,\n'@{item().SourceTableName}' as SourceTableName,\n'@{item().DataLakeContainer}' as TargetDataLakeContainerName,\n'@{concat(item().DataLakeFolder,'/DELTA/',item().SourceSchemaName,'/',item().DestinationTargetFolder,'/',variables('varYYYYMMDD'))}' as TargetDirectoryName,\n'@{concat('DELTA_',item().DestinationTargetFolder,'_',variables('varCurrentDateTimeCSTFilename'),'.parquet')}' as TargetFileName,\n'@{pipeline().TriggerType}' as TriggerType,\n'@{pipeline().TriggerID}' as TriggerId,\n'@{pipeline().TriggerName}' as TriggerName,\n'@{pipeline().TriggerTime}' as TriggerTime,\n'@{activity('CopySalesforceToADLSDelta').output.rowsCopied}' as RowsCopied,\n'@{activity('CopySalesforceToADLSDelta').output.rowsRead}' as RowsRead,\n'@{activity('CopySalesforceToADLSDelta').output.usedParallelCopies}' as NoParallelCopies,\n'@{activity('CopySalesforceToADLSDelta').output.copyDuration}' as CopyDurationInSecs,\n'@{activity('CopySalesforceToADLSDelta').output.effectiveIntegrationRuntime}' as effectiveIntegrationRuntime,\n'@{activity('CopySalesforceToADLSDelta').output.executionDetails[0].source}' as SourceType,\n'@{activity('CopySalesforceToADLSDelta').output.executionDetails[0].sink}' as SinkType,\n'@{activity('CopySalesforceToADLSDelta').output.executionDetails[0].status}' as ExecutionStatus,\n'@{activity('CopySalesforceToADLSDelta').output.executionDetails[0].start}' as CopyActivityStartTime,\n'@{utcnow()}' as CopyActivityEndTime,\n'@{activity('CopySalesforceToADLSDelta').output.executionDetails[0].detailedDurations.queuingDuration}' as CopyActivityQueuingDurationInSecs,\n'@{activity('CopySalesforceToADLSDelta').output.executionDetails[0].detailedDurations.timeToFirstByte}' as CopyActivityPreCopyScriptDurationInSecs,\n'@{activity('CopySalesforceToADLSDelta').output.executionDetails[0].detailedDurations.transferDuration}' as CopyActivityTransferDurationInSecs,\nnull as ErrorMessage",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"sink": {
														"type": "AzureSqlSink",
														"disableMetricsCollection": false
													},
													"enableStaging": false
												}
											},
											{
												"name": "LogCopyFailureDelta",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "CopySalesforceToADLSDelta",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderQuery": {
															"value": "SELECT '@{pipeline().DataFactory}' as DataFactoryName,\n'@{pipeline().Pipeline}' as PipelineName,\n'@{pipeline().RunId}' as RunId,\n'SQL_To_DataLake' as SourceToTargetType,\n'@{item().SourceExtractMethod}' as SourceExtractMethod,\n'@{item().SourceFullExtractOverrideFlag}' as SourceFullExtractOverrideFlag,\n'@{item().SourceServerName}' as SourceServerName,\n'@{item().SourceDatabaseName}' as SourceDatabaseName,\n'@{item().SourceSchemaName}' as SourceSchemaName,\n'@{item().SourceTableName}' as SourceTableName,\n'@{item().DataLakeContainer}' as TargetDataLakeContainerName,\n'@{concat(item().DataLakeFolder,'/DELTA/',item().SourceSchemaName,'/',item().DestinationTargetFolder,'/',variables('varYYYYMMDD'))}' as TargetDirectoryName,\n'@{concat('DELTA_',item().DestinationTargetFolder,'_',variables('varCurrentDateTimeCSTFilename'),'.parquet')}' as TargetFileName,\n'@{pipeline().TriggerType}' as TriggerType,\n'@{pipeline().TriggerID}' as TriggerId,\n'@{pipeline().TriggerName}' as TriggerName,\n'@{pipeline().TriggerTime}' as TriggerTime,\nnull as RowsCopied,\nnull as RowsRead,\n'@{activity('CopySalesforceToADLSDelta').output.usedParallelCopies}' as NoParallelCopies,\n'@{activity('CopySalesforceToADLSDelta').output.copyDuration}' as CopyDurationInSecs,\n'@{activity('CopySalesforceToADLSDelta').output.effectiveIntegrationRuntime}' as effectiveIntegrationRuntime,\n'@{activity('CopySalesforceToADLSDelta').output.executionDetails[0].source}' as SourceType,\n'@{activity('CopySalesforceToADLSDelta').output.executionDetails[0].sink}' as SinkType,\n'@{activity('CopySalesforceToADLSDelta').output.executionDetails[0].status}' as ExecutionStatus,\n'@{activity('CopySalesforceToADLSDelta').output.executionDetails[0].start}' as CopyActivityStartTime,\n'@{utcnow()}' as CopyActivityEndTime,\n'' as CopyActivityQueuingDurationInSecs,\n'' as CopyActivityPreCopyScriptDurationInSecs,\n'' as CopyActivityTransferDurationInSecs,\n'@{replace(activity('CopySalesforceToADLSDelta').output.errors[0].Message,'''','')}' as ErrorMessage",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"sink": {
														"type": "AzureSqlSink",
														"disableMetricsCollection": false
													},
													"enableStaging": false
												}
											}
										]
									}
								]
							}
						},
						{
							"name": "UpdateControlTable",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [
								{
									"activity": "ExtractionMethod",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[etl].[UpdateControlTableSourceToADLSLoad]",
								"storedProcedureParameters": {
									"SourceServerName": {
										"value": {
											"value": "@item().SourceServerName",
											"type": "Expression"
										},
										"type": "String"
									},
									"SourceDatabaseName": {
										"value": {
											"value": "@item().SourceDatabaseName",
											"type": "Expression"
										},
										"type": "String"
									},
									"SourceSchemaName": {
										"value": {
											"value": "@item().SourceSchemaName",
											"type": "Expression"
										},
										"type": "String"
									},
									"SourceTableName": {
										"value": {
											"value": "@item().SourceTableName",
											"type": "Expression"
										},
										"type": "String"
									},
									"PipelineRunDateTime": {
										"value": {
											"value": "@pipeline().TriggerTime",
											"type": "Expression"
										},
										"type": "Datetime"
									},
									"WatermarkDateTime": {
										"value": {
											"value": "@variables('varCurrentDateTimeCST')",
											"type": "Expression"
										},
										"type": "Datetime"
									},
									"ChangeTrackingVersion": {
										"value": {
											"value": "0",
											"type": "Expression"
										},
										"type": "Int32"
									},
									"ForDFlag": {
										"value": {
											"value": "@if(equals(item().SourceFullExtractOverrideFlag,'Y'), 'Y', 'N')",
											"type": "Expression"
										},
										"type": "String"
									}
								}
							}
						}
					]
				}
			}
		],
		"variables": {
			"varCurrentDateTimeCSTFilename": {
				"type": "String",
				"defaultValue": "1900-01-01 00:00:00"
			},
			"varCurrentDateTimeCST": {
				"type": "String",
				"defaultValue": "1900-01-01 00:00:00"
			},
			"varYYYYMMDD": {
				"type": "String"
			}
		},
		"folder": {
			"name": "ADAP/Ingest To DataLake"
		},
		"annotations": [],
		"lastPublishTime": "2022-07-28T22:25:26Z"
	},
	"type": "Microsoft.DataFactory/factories/pipelines"
}